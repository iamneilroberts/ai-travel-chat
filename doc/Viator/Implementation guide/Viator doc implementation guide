
Building your local database – taxonomy

All our products are categorized under a destination hierarchy. You will use this hierarchy to build your database and effectively catalogue our products.
\
/destinations
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
Get details of all destinations

    Every product in the Viator catalogue is categorized according to the destination/locale in which it operates. This endpoint returns a complete list of Viator destinations, including destination names and parent identifiers (for the hierarchy of destinations check the lookupId field).
    This endpoint is used to help define the destinations of products and attractions (i.e. primary and secondary) for the purpose of merchandising products. For example, Disneyland Paris’s primary destination is Paris, even though the actual destination (secondary destination) is Marne-la-Vallee. Travelers are more likely to search for Paris when looking for Disneyland Paris than Marne-la-Valle.
    This endpoint is used to provide navigation on your site, through drilldown lists, combo boxes, or breadcrumbs.
    Fields returned in the response can be used to map a destination to an IATA code (airlines) or language.
    Destination data must be cached. While destinations rarely change, we recommend refreshing the list of destinations weekly.

 

You can also create a catalogue of attractions and merchandize products based on the attraction they are linked to.

\
/attractions/search
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
Get all attractions for a destination

    This endpoint returns all attractions within a destination (facilitates mapping destinations to attractions) and is used to help merchandize products by attraction.
    Attractions can be sorted by ALPHABETICAL, DEFAULT & REVIEW_AVG_RATING order.
    Pagination rules apply to this endpoint: no more than 30 products can be requested in a single call (“count”: 30). The first request should be done with “start”: 1, the second request must include the value of the start parameter for the next result you wish to see. For example, if the first request was done with “start”: 1 and “count”: 30, the second request will be done with “start”: 31 and “count”: 30, the third one with “start”: 61 and “count”: 30 etc.
    Attraction details include: destination mapping, Viator attraction URL (Affiliate partners only), number of products + product codes, reviews, images, introduction, overview, details of admission type (free/not free), opening hours, full address.
    When a product is linked to an attraction the relevant attractionId is returned for a product in the response to the product content endpoint. You can map products to attractions using the attractionId extracted from the product content response.
    This is also useful for navigation as well as building out basic attractions pages.
    With this endpoint you can get aggregated product and review count/rating for an attraction.
    Attraction data must be cached and refreshed weekly.

↑ Back to top
Managing product content

There are three product content endpoints that are used to get product data. We highly recommend ingesting all product content into your database. By using a local database, you need only perform a single initial ingestion of data; then, only new and updated product content will be ingested. This will result in faster load times and will overall provide a better experience for travelers. If ingestion is not an option for you, you can request the details of a single product making a real-time call when the customer selects the product on your site.
Key features of these endpoints
"

Ingest over 300,000+ products quickly and efficiently
R

Updating product content with fewer, but more frequent requests provides travelers with accurate information


Only ingesting new or modified product information speeds up load times
f

Structured data fields make it easier to break out key information and merchandise products
Ingest products & keep the product catalogue up to date
\
/products/modified-since
⊗ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants

1a. Perform an initial ingestion of all product data

    Performs an initial ingestion of all product data into a local database. You may filter out any products during the initial ingestion. You may filter out on your end any products based on the response to this endpoint.
    For the initial ingestion of the product catalogue, the first request to /products/modified-since must include only the count parameter in the request body (value not higher than 500). This way you will start ingesting all Viator products from scratch. This is the only time when the cursor or the modified-since parameter should not be used. The nextCursor parameter returned in the response points to the next page of results and must be used the next call to /products/modified-since. This process must be repeated until the nextCursor is not returned in the response – this means that there are no more results.

1b. Ingest only new or updated product data

    Used to ingest only new or updated product information, as well as to identify deactivated products. Products are considered updated when the supplier makes any changes to the product’s details, excluding pricing and availability changes, which are retrieved from the availability schedule endpoint. This endpoint returns all product details (not only changes) for updated products and all details must be refreshed in your database accordingly.
    We recommend polling this service every 15 minutes to look for updates and to avoid any discrepancies. Updates must be ingested at least hourly.
    Method: Continuously poll all updates using the new nextCursor value until no more updates are left.
    The modified-since parameter should not be used as the standard pagination method; rather, use the cursor parameter to ensure all product updates are captured during ingestion. The valid use case for modified-since parameter is to re-sync data if there was an issue on your side and you need to re-ingest updates from a specific time in the past, i.e. yesterday. In such cases you could re-start the job using the last crawled date as the modified-since date on first request and then continue ingesting updates with the cursor parameter. You should never use both the cursor and the modified-since parameters in the same request.
    For pulling updates, remember to use the cursor parameter set to the value of the most recent nextCursor element returned by a request to the same endpoint. Then continue to make requests with the cursor parameter set to the value of the nextCursor element of the previous request, until a request again does not include a nextCursor value.
    You need to track the last nextCursor you received as this will be used to update the product catalogue during the next ingestion.
    You should never re-ingest the entire product catalogue unless you need to re-initialize your database.

Important: Only this endpoint can be used to ingest the product catalog. You can read more about supported models for managing the product and availability data in this article: Managing product and availability data.

Get details of a single product in real-time
\
/products/{product-code}
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
2. Pull product data for a single product in real-time

    Pulls info for a single product by providing the corresponding product code.
    Used in real-time to get details of a single product when the customer selects a product from the search results returned with the search endpoint (/products/search or /search/freetext).
    The response can be cached for up to 1 hour but this endpoint must not be used to ingest content for all products.
    This endpoint must not be used if you’re already ingesting products with the /products/modified-since endpoint as both endpoints pull data from the same source. The /products/{product-code} endpoint doesn’t return more accurate data but it’s used in real-time to fetch product information when needed if the product details haven’t been ingested into partner’s database with the /products/modified-since endpoint.

 

Pull details of selected products if needed
\
/products/bulk
⊗ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
3. Pull product data for multiple products

    Similar to /products/{product-code}, this endpoint will pull in product information for a specified list of products, up to 500 products per request.
    Special use case: In the case that a product was not correctly ingested via the /products/modified-since endpoint, you can use /products/bulk to reingest those products. This use case applies only to a situation when specific products with known product codes haven’t been ingested correctly on your end, not to a situation when it’s necessary to re-ingest product updates for all products from a specific date in the past – for that you must use the /products/modified-since endpoint.
    This endpoint may be used as part of a regular ingestion process only if you have a small curated product list (<10k) that you want to refresh on schedule or if you need to fix some products on your end. If this doesn’t apply to your implementation and you need to ingest product content for many / all products, you must use the /products/modified-since endpoint for this purpose.
    This should be used only if you have a small curated product list (<10k) that you want to refresh on schedule or if you need to fix some products on your end. If this doesn’t apply to your implementation and you need to ingest product content for many / all products, you must use the /products/modified-since endpoint for this purpose.

What’s included in the response to product content endpoints?

These endpoints return all product information, including, but not limited to:

    Titles
    Descriptions
    Ticket types
    Supplier photos*
    Review ratings and counts
    Meeting points
    Traveler pick up details (if applicable)

    Inclusions and exclusions
    Cancellation policy
    Additional information from the supplier
    Booking confirmation settings (e.g. instant confirmation or on-request products)
    Booking requirements (e.g. min or max travelers)

    Booking questions
    Itineraries
    Product options
    Supplier name

*Viator also allows travelers to upload their own photos. Traveler photos will have to be ingested via /reviews/product.
Creating the search functionality with search endpoints
\
/products/search or /search/freetext
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
Pull product summaries based on search criteria 

    When product summaries are returned, they contain a small amount of crucial product information such as, but not limited to, title, short descriptions, images, pricing, and review ratings and counts.
    You can effectively filter out products returned in the request by specifying search criteria, such as destination IDs, price range, and date range. You also have the option to filter by category using tag IDs and can filter by flags, such as free cancellation or skip-the-line tours.
    The search functionalities help identify high-quality products using tags (applicable only to the /products/search endpoint; see the quality-related tags in this article: Viator tags, explained) or flags (“LIKELY_TO_SELL_OUT” – popular products that routinely sell out)
    The /search/freetext endpoint allows an easy implementation of the search functionality based on the desired search term (supported search types: ATTRACTIONS, DESTINATIONS, PRODUCTS).
    You will specify the format in which you want the response, such as the language and currency and will specify how the response will be sorted. You can apply the “featured” (“DEFAULT”) sort order from Viator to display featured products first in search results. Note: Tours, activities and experiences are ranked using exclusive Viator data that may include product quality, reviews, ratings, photos, popularity, user preferences, price, bookings made through Viator, and payments made by operators.
    These endpoints are ideal for where short product summaries would be needed, such as on search cards on search results pages.
    Pagination rules apply to these endpoints: No more than 50 products can be requested in a single call (“count”: 50). The first request should be done with “start”: 1, the second request must include the value of the start parameter for the next result you wish to see. For example, if the first request was done with “start”: 1 and “count”: 50, the second request will be done with “start”: 51 and “count”: 50, the third one with “start”: 101 and “count”: 50 etc.
    You should paginate through the search results (using the start and the count paremeters) only when the customer wants to move to the next page with search results to see more products. First, you can retrieve and display maximum 50 products and if the customer wants to move to the next page with search results, another request to the search endpoint should be done to request additional products. You shouldn’t pull automatically all products from each destination when the user initiates the search, this would be an incorrect usage of the endpoint and would result in long load times.
    The search endpoints must not be used for ingestion, the /products/modified-since endpoint must be used for that purpose. These endpoints can be used only for real-time searches (results may be cached for up to 1 hour, anything above that would risk stale data).

 

 

Displaying location details
\
/locations/bulk
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
Get full location details for the requested location references

    Location details returned in /locations/bulk include the name of the location, the street address, and the longitude/latitude coordinates of the location. The locations are not to be confused with destinations retrieved with the /destinations endpoint.
    Locations details can be used to highlight pickup/drop off points or meeting point locations, to build itineraries, or even overlay locations on a map to help provide additional context to what a traveler can expect on the tour.
    This endpoint can be used to provide pickup locations to travelers through a drop-down list. In addition to that, travelers can specify custom pickup info through a plain text field (when a custom pickup location is supported based on the value returned in the “allowCustomTravelerPickup” field).
    There is a lot of location data in the API and it doesn’t change frequently. To avoid too many unnecessary requests to this service, location data must be cached and it should be refreshed monthly. Additionally, the /locations/bulk endpoint should be used on demand for any new location references returned in the product content response.

structured itinerary

Example of a structured itinerary with a map overlay

Categorizing products and promoting high-quality products using tags
\
/products/tags
✓ Basic-access Affiliates ✓ Full-access Affiliates ✓ Full + Booking access Affiliates ✓ Merchants
1. Ingest tags into a local database with /products/tags

    Tags should be cached and refreshed weekly.

2. Build a hierarchical structure of categories and subcategories

    Tag taxonomy allows an easy way to classify products into categories and subcategories.
    Each tag can have one or more parents – identified by parentTagId in the API response. This way tags can be organized in a hierarchical way with main categories and subcategories.

3. Create custom filtering options

    Filtering by tags is available as a pre-built solution in the /products/search endpoint to easily identify and display to customers products from relevant categories or products that meet the desired quality level.
    Tags are the easiest way to identify high-quality products that generate the highest sale. These tags are:

tagId 21972 – Excellent Quality
tagId 22143 – Best Conversion
tagId 22083 – Likely To Sell Out
tagId 11940 – Once in a Lifetime
tagId 21074 – Unique experiences
tagId 6226 – Best Value
tagId 21971 – Viator Plus
4. Work on your merchandising strategy

    Tags can be used for product curation and to create custom marketing campaigns such as holiday offerings, to help your product and marketing teams maximise the possibilities coming from the API integration with Viator.

Read more about tags in this article: Viator tags, explained.


